     1                                  ; Reference: 作って理解するOS x86系コンピュータを動かす理論と実装 (https://gihyo.jp/book/2019/978-4-297-10847-2)
     2                                  %include    "../include/macro.s"
     3                              <1> %macro  cdecl 1-*.nolist
     4                              <1> 
     5                              <1>     %rep    %0 - 1
     6                              <1>         push    %{-1:-1}
     7                              <1>         %rotate -1
     8                              <1>     %endrep
     9                              <1>     %rotate -1
    10                              <1> 
    11                              <1>         call    %1
    12                              <1>     
    13                              <1>     %if 1 < %0
    14                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    15                              <1>     %endif
    16                              <1> 
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> struc drive
    20 00000000 ????                <1>         .no         resw    1       ; Drive Number
    21 00000002 ????                <1>         .cyln       resw    1       ; Cylinder
    22 00000004 ????                <1>         .head       resw    1       ; HEAD
    23 00000006 ????                <1>         .sect       resw    1       ; Sector
    24                              <1> endstruc
     3                                  %include    "../include/define.s"
     4                              <1> BOOT_LOAD   equ     0x7c00
     5                              <1> 
     6                              <1> BOOT_SIZE   equ     (1024 * 8)
     7                              <1> SECT_SIZE   equ     (512)
     8                              <1> BOOT_SECT   equ     (BOOT_SIZE / SECT_SIZE) ; Sector count of Boot program. 
     4                                  
     5                                      ORG     BOOT_LOAD           ; Instruct load address to assembler.
     6                                  ; *****************
     7                                  ;    Entory Point 
     8                                  ; *****************
     9                                  entry:
    10 00000000 EB58                        jmp     ipl
    11 00000002 90<rep 58h>                 times    90-($-$$) db 0x90 ; BPB(BOPS Parameter Block)
    12                                  
    13                                  ipl:
    14 0000005A FA                          cli     ; Disabling Inerrupt
    15                                  
    16 0000005B B80000                      mov     ax, 0x0000
    17 0000005E 8ED8                        mov     ds, ax
    18 00000060 8EC0                        mov     es, ax
    19 00000062 8ED0                        mov     ss, ax
    20 00000064 BC007C                      mov     sp, BOOT_LOAD
    21                                  
    22 00000067 FB                          sti
    23                                  
    24 00000068 8816[C400]                  mov     [BOOT + drive.no], dl
    25                                  
    26 0000006C 68[9900]E85A0083C4-         cdecl   puts, .s0
    26 00000074 02                 
    27                                  
    28                                      ; Read all rest sector
    29 00000075 BB0F00                      mov     bx, BOOT_SECT - 1
    30 00000078 B9007E                      mov     cx, BOOT_LOAD + SECT_SIZE
    31                                  
    32 0000007B 515368[C400]E8A700-         cdecl   read_chs, BOOT, bx, cx
    32 00000083 83C406             
    33                                  
    34 00000086 39D8                        cmp     ax, bx
    35                                  .10Q:
    36 00000088 740C                        jz      .10E
    37                                  .10T:
    38 0000008A 68[B100]E83C0083C4-         cdecl   puts, .e0
    38 00000092 02                 
    39 00000093 E85500                      call    reboot
    40                                  .10E:
    41                                  
    42                                      ; Jamp nest stage
    43 00000096 E94C02                      jmp     stage_2
    44                                  
    45 00000099 426F6F74696E672048-     .s0     db  "Booting HunachiOS....", 0x0A, 0x0D, 0
    45 000000A2 756E616368694F532E-
    45 000000AB 2E2E2E0A0D00       
    46 000000B1 4572726F723A736563-     .e0     db  "Error:sector read", 0
    46 000000BA 746F72207265616400 
    47                                  
    48 000000C3 00                      ALIGN 2, db 0
    49                                  BOOT:
    50                                      istruc  drive
    51 000000C4 0000                            at  drive.no,   dw 0 ; Drive number
    52 000000C6 0000                            at  drive.cyln, dw 0 ; C: Cylinder
    53 000000C8 0000                            at  drive.head, dw 0 ; H: Head
    54 000000CA 0200                            at  drive.sect, dw 2 ; S: Sector
    55                                      iend
    56                                  
    57                                  ; Module
    58                                  %include    "../modules/real/puts.s"
    59                              <1> puts:
    60 000000CC 55                  <1>     push    bp
    61 000000CD 89E5                <1>     mov     bp, sp
    62                              <1> 
    63 000000CF 50                  <1>     push    ax
    64 000000D0 53                  <1>     push    bx
    65 000000D1 56                  <1>     push    si
    66                              <1> 
    67 000000D2 8B7604              <1>     mov     si, [bp + 4]    ; Address of string.
    68                              <1> 
    69                              <1>     ; Start program
    70 000000D5 B40E                <1>     mov     ah, 0x0E        ; teletype's single word output
    71 000000D7 BB0000              <1>     mov     bx, 0x0000      ; setting page number and word's color 0
    72 000000DA FC                  <1>     cld                     ; DF = 0 ; Add Address.
    73                              <1> .10L:
    74 000000DB AC                  <1>     lodsb                   ; al = *si++;
    75                              <1> 
    76 000000DC 3C00                <1>     cmp     al, 0
    77 000000DE 7404                <1>     je      .10E
    78                              <1> 
    79 000000E0 CD10                <1>     int     0x10            ; call video BIOS.
    80 000000E2 EBF7                <1>     jmp     .10L
    81                              <1> 
    82                              <1> .10E:
    83 000000E4 5E                  <1>     pop     si
    84 000000E5 5B                  <1>     pop     bx
    85 000000E6 58                  <1>     pop     ax
    86                              <1> 
    87 000000E7 89EC                <1>     mov     sp, bp
    88 000000E9 5D                  <1>     pop     bp
    89                              <1> 
    90 000000EA C3                  <1>     ret
    59                                  %include    "../modules/real/reboot.s"
    60                              <1> reboot:
    61                              <1>         ; Display message
    62 000000EB 68[0701]E8DBFF83C4- <1>         cdecl   puts, .s0
    62 000000F3 02                  <1>
    63                              <1> 
    64                              <1>         ; Wait input from keyboard
    65                              <1> .10L:   
    66 000000F4 B410                <1>         mov     ah, 0x10
    67 000000F6 CD16                <1>         int     0x16
    68                              <1> 
    69 000000F8 3C20                <1>         cmp     al, ' '
    70 000000FA 75F8                <1>         jne     .10L
    71                              <1> 
    72                              <1>         ; Display retuen
    73 000000FC 68[2501]E8CAFF83C4- <1>         cdecl    puts, .s1
    73 00000104 02                  <1>
    74                              <1> 
    75                              <1>         ; Reboot
    76 00000105 CD19                <1>         int     0x19        ; BIOS(0x19)
    77                              <1> 
    78 00000107 0A0D50757368205350- <1> .s0     db  0x0A, 0x0D, "Push SPACE key to reboot...", 0
    78 00000110 414345206B65792074- <1>
    78 00000119 6F207265626F6F742E- <1>
    78 00000122 2E2E00              <1>
    79 00000125 0A0D0A0D00          <1> .s1     db  0x0A, 0x0D, 0x0A, 0x0D, 0
    80                              <1> 
    60                                  %include    "../modules/real/read_chs.s"
    61                              <1> read_chs:
    62                              <1>     ; +8 copy dist | +6 sector size | +4 parameter buffer
    63 0000012A 55                  <1>     push    bp
    64 0000012B 89E5                <1>     mov     bp, sp 
    65 0000012D 6A03                <1>     push    3           ; retry = 3 ; Retry Number
    66 0000012F 6A00                <1>     push    0           ; sect = 0 ; Reading Sector Number
    67                              <1> 
    68 00000131 53                  <1>     push    bx          
    69 00000132 51                  <1>     push    cx          
    70 00000133 52                  <1>     push    dx          
    71 00000134 06                  <1>     push    es
    72 00000135 56                  <1>     push    si
    73                              <1> 
    74                              <1>     ; start program
    75 00000136 8B7604              <1>     mov     si, [bp + 4]    ; SI = SRC buffer
    76                              <1> 
    77                              <1>     ; Setting Cylinder
    78 00000139 8A6C02              <1>     mov     ch, [si + drive.cyln + 0]
    79 0000013C 8A4C03              <1>     mov     cl, [si + drive.cyln + 1]
    80 0000013F C0E106              <1>     shl     cl, 6
    81 00000142 0A4C06              <1>     or      cl, [si + drive.sect]
    82                              <1> 
    83                              <1>     ; Read Sector
    84 00000145 8A7404              <1>     mov     dh, [si + drive.head]   ; dh = head number
    85 00000148 8A14                <1>     mov     dl, [si + 0]            ; dl = Drive number
    86 0000014A B80000              <1>     mov     ax, 0x0000              
    87 0000014D 8EC0                <1>     mov     es, ax                  ; es = segment
    88 0000014F 8B5E08              <1>     mov     bx, [bp + 8]            ; bx = copy dst
    89                              <1> .10L:
    90 00000152 B402                <1>     mov     ah, 0x02
    91 00000154 8A4606              <1>     mov     al, [bp + 6]
    92                              <1> 
    93 00000157 CD13                <1>     int     0x13                    ; cf = BIOS(0x13, 0x02)
    94 00000159 7304                <1>     jnc     .11E
    95                              <1> 
    96 0000015B B000                <1>     mov     al, 0
    97 0000015D EB0C                <1>     jmp     .10E
    98                              <1> .11E:
    99 0000015F 3C00                <1>     cmp     al, 0
   100 00000161 7508                <1>     jne     .10E
   101                              <1> 
   102 00000163 B80000              <1>     mov     ax, 0
   103 00000166 FF4EFE              <1>     dec     word [bp - 2]
   104 00000169 75E7                <1>     jnz     .10L
   105                              <1> .10E:
   106 0000016B B400                <1>     mov     ah, 0
   107                              <1> 
   108 0000016D 5E                  <1>     pop     si
   109 0000016E 07                  <1>     pop     es
   110 0000016F 5A                  <1>     pop     dx
   111 00000170 59                  <1>     pop     cx
   112 00000171 5B                  <1>     pop     bx
   113                              <1> 
   114 00000172 89EC                <1>     mov     sp, bp
   115 00000174 5D                  <1>     pop     bp
   116                              <1> 
   117 00000175 C3                  <1>     ret
   118                              <1>     
   119                              <1> 
   120                              <1> 
   121                              <1> 
    61                                  
    62 00000176 00<rep 88h>                 times    510-($-$$) db 0x00
    63 000001FE 55AA                        db      0x55, 0xAA
    64                                  
    65                                  ; Information which got in real mode.
    66                                  FONT:
    67 00000200 0000                        .seg:   dw 0
    68 00000202 0000                        .off:   dw 0
    69                                  
    70                                  ; Module (allocate after head 512 byte)
    71                                  %include    "../modules/real/itoa.s"
    72                              <1> ; A Function convert Number to string
    73                              <1> itoa:
    74                              <1>         ; +12 Flag | +10 Cardinal Number | +8 Buffer Size | +6 Buffer Address | +4 Number | +2 IP(Return Address) | 0 BP 
    75 00000204 55                  <1>         push    bp                          
    76 00000205 89E5                <1>         mov     bp, sp         
    77                              <1> 
    78 00000207 50                  <1>         push    ax
    79 00000208 53                  <1>         push    bx
    80 00000209 51                  <1>         push    cx
    81 0000020A 52                  <1>         push    dx
    82 0000020B 56                  <1>         push    si
    83 0000020C 57                  <1>         push    di
    84                              <1> 
    85                              <1>         ; Get Arguments
    86 0000020D 8B4604              <1>         mov     ax, [bp + 4]                
    87 00000210 8B7606              <1>         mov     si, [bp + 6]                
    88 00000213 8B4E08              <1>         mov     cx, [bp + 8]               
    89                              <1> 
    90 00000216 89F7                <1>         mov     di, si      ; di = &si[size - 1] ; last item of Buffer             
    91 00000218 01CF                <1>         add     di, cx                      
    92 0000021A 4F                  <1>         dec     di                          
    93                              <1> 
    94 0000021B 8B5E0C              <1>         mov     bx, word [bp + 12]          
    95                              <1> 
    96                              <1>         ; Signed judg
    97                              <1>         ; if (bx & 0x01) { // Signed
    98                              <1>         ;   if (ax < 0) {
    99                              <1>         ;       bx |= 2 // set flag for display +-.
   100                              <1>         ;   }  
   101                              <1>         ; }
   102 0000021E F7C30100            <1>         test    bx, 0b0001                  
   103 00000222 7408                <1> .10Q:   je      .10E                         
   104 00000224 83F800              <1>         cmp     ax, 0                       
   105 00000227 7D03                <1> .12Q:   jge     .12E                        
   106 00000229 83CB02              <1>         or      bx, 0b0010                  
   107                              <1> .12E:
   108                              <1> .10E:
   109                              <1> 
   110                              <1>         ; Signed output judg
   111                              <1>         ;if (bx & 0x02) { // Check Flag which setting above code.
   112                              <1>         ;    if (ax < 0) { 
   113                              <1>         ;        ax *= -1 // Reverse sign 
   114                              <1>         ;        *si = '-'
   115                              <1>         ;    } else {
   116                              <1>         ;        *si = '+'
   117                              <1>         ;    }
   118                              <1>         ;    cx--;
   119                              <1>         ;}
   120 0000022C F7C30200            <1>         test    bx, 0b0010                  
   121 00000230 7410                <1> .20Q:   je      .20E                         
   122 00000232 83F800              <1>         cmp     ax, 0                       
   123 00000235 7D07                <1> .22Q:   jge     .22F                        
   124 00000237 F7D8                <1>         neg     ax                          
   125 00000239 C6042D              <1>         mov     [si], byte '-'              
   126 0000023C EB03                <1>         jmp     .22E
   127                              <1> .22F:
   128 0000023E C6042B              <1>         mov     [si], byte '+'              
   129                              <1> .22E:
   130 00000241 49                  <1>         dec     cx
   131                              <1> .20E:
   132                              <1> 
   133                              <1>         ; Convert to ASCII Code
   134 00000242 8B5E0A              <1>         mov     bx, [bp + 10]               
   135                              <1> .30L:
   136 00000245 BA0000              <1>         mov     dx, 0
   137 00000248 F7F3                <1>         div     bx
   138                              <1> 
   139 0000024A 89D6                <1>         mov     si, dx
   140 0000024C 8A94[7402]          <1>         mov     dl, byte [.ascii + si]
   141                              <1> 
   142 00000250 8815                <1>         mov     [di], dl
   143 00000252 4F                  <1>         dec     di
   144                              <1> 
   145 00000253 83F800              <1>         cmp     ax, 0
   146 00000256 E0ED                <1>         loopnz  .30L
   147                              <1>     
   148                              <1> .30E:
   149                              <1>         ; Fill in space
   150 00000258 83F900              <1>         cmp     cx, 0
   151 0000025B 740D                <1> .40Q:   je      .40E
   152 0000025D B020                <1>         mov     al, ' '
   153 0000025F 837E0C04            <1>         cmp     [bp + 12], word 0b0100
   154 00000263 7502                <1> .42Q:   jne     .42E
   155 00000265 B030                <1>         mov     al, '0'
   156                              <1> .42E:
   157 00000267 FD                  <1>         std
   158 00000268 F3AA                <1>         rep     stosb
   159                              <1> .40E:
   160 0000026A 5F                  <1>         pop     di
   161 0000026B 5E                  <1>         pop     si
   162 0000026C 5A                  <1>         pop     dx
   163 0000026D 59                  <1>         pop     cx
   164 0000026E 5B                  <1>         pop     bx
   165 0000026F 58                  <1>         pop     ax
   166                              <1> 
   167 00000270 89EC                <1>         mov     sp, bp
   168 00000272 5D                  <1>         pop     bp
   169                              <1> 
   170 00000273 C3                  <1>         ret
   171                              <1> 
   172 00000274 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"          ; table for convert
   172 0000027D 39414243444546      <1>
    72                                  %include    "../modules/real/get_drive_param.s"
    73                              <1> get_drive_param:
    74 00000284 55                  <1>     push    bp
    75 00000285 89E5                <1>     mov     bp, sp 
    76                              <1> 
    77 00000287 53                  <1>     push    bx          
    78 00000288 51                  <1>     push    cx                   
    79 00000289 06                  <1>     push    es
    80 0000028A 56                  <1>     push    si
    81 0000028B 57                  <1>     push    di 
    82                              <1> 
    83                              <1>     ; start program
    84 0000028C 8B7604              <1>     mov     si, [bp + 4]    ; SI = SRC buffer
    85                              <1> 
    86 0000028F B80000              <1>     mov     ax, 0           ; Clear Disk Base Table Pointer 
    87 00000292 8EC0                <1>     mov     es, ax
    88                              <1> 
    89 00000294 89C7                <1>     mov     di, ax
    90                              <1> 
    91 00000296 B408                <1>     mov     ah, 8
    92 00000298 8A14                <1>     mov     dl, [si, drive.no]
    93 0000029A CD13                <1>     int     0x13
    94                              <1> .10Q:
    95 0000029C 721B                <1>     jc      .10F
    96                              <1> .10T:
    97 0000029E 88C8                <1>     mov     al, cl
    98 000002A0 83E03F              <1>     and     ax, 0x3F        ; ax = Sector count(Vaild only lower 16bit.)
    99                              <1> 
   100 000002A3 C0E906              <1>     shr     cl, 6
   101 000002A6 C1C908              <1>     ror     cx, 8
   102 000002A9 41                  <1>     inc     cx
   103                              <1> 
   104 000002AA 0FB6DE              <1>     movzx   bx, dh          ; bx = head count
   105 000002AD 43                  <1>     inc    bx
   106                              <1> 
   107 000002AE 894C02              <1>     mov     [si + drive.cyln], cx
   108 000002B1 895C04              <1>     mov     [si + drive.head], bx
   109 000002B4 894406              <1>     mov     [si + drive.sect], ax
   110                              <1> 
   111 000002B7 EB03                <1>     jmp     .10E
   112                              <1> .10F:                          ; Failed
   113 000002B9 B80000              <1>     mov     ax, 0
   114                              <1> .10E:
   115 000002BC 5F                  <1>     pop     di
   116 000002BD 5E                  <1>     pop     si
   117 000002BE 07                  <1>     pop     es
   118 000002BF 59                  <1>     pop     cx
   119 000002C0 5B                  <1>     pop     bx
   120                              <1> 
   121 000002C1 89EC                <1>     mov     sp, bp
   122 000002C3 5D                  <1>     pop     bp
   123                              <1> 
   124 000002C4 C3                  <1>     ret
   125                              <1>     
   126                              <1> 
   127                              <1> 
   128                              <1> 
    73                                  %include    "../modules/real/get_font_adr.s"
    74                              <1> get_font_adr:
    75 000002C5 55                  <1>     push    bp
    76 000002C6 89E5                <1>     mov     bp, sp 
    77                              <1> 
    78 000002C8 50                  <1>     push    ax
    79 000002C9 53                  <1>     push    bx          
    80 000002CA 56                  <1>     push    si
    81 000002CB 06                  <1>     push    es
    82 000002CC 55                  <1>     push    bp 
    83                              <1> 
    84                              <1>     ; start program
    85 000002CD 8B7604              <1>     mov     si, [bp + 4]    ; si = FONTアドレスの保存先
    86                              <1> 
    87 000002D0 B81311              <1>     mov     ax, 0x1113      ; Get font address
    88 000002D3 B706                <1>     mov     bh, 0x06        ; 8x16 font (vga/mcga)
    89 000002D5 CD10                <1>     int     10h             ; ES:BP=FONT ADDRESS
    90                              <1> 
    91 000002D7 8C04                <1>     mov     [si + 0], es
    92 000002D9 896C02              <1>     mov     [si + 2], bp
    93                              <1>     
    94 000002DC 5D                  <1>     pop     bp
    95 000002DD 07                  <1>     pop     es
    96 000002DE 5E                  <1>     pop     si
    97 000002DF 5B                  <1>     pop     bx
    98 000002E0 58                  <1>     pop     ax
    99                              <1> 
   100 000002E1 89EC                <1>     mov     sp, bp
   101 000002E3 5D                  <1>     pop     bp
   102                              <1> 
   103 000002E4 C3                  <1>     ret
   104                              <1>     
   105                              <1> 
   106                              <1> 
   107                              <1> 
    74                                  
    75                                  stage_2:
    76 000002E5 68[5F03]E8E1FD83C4-         cdecl   puts, .s0
    76 000002ED 02                 
    77                                  
    78                                      ; Get drive information
    79 000002EE 68[C400]E890FF83C4-         cdecl   get_drive_param, BOOT
    79 000002F6 02                 
    80 000002F7 83F800                      cmp     ax, 0
    81                                  .10Q:
    82 000002FA 750C                        jne     .10E
    83                                  .10T:
    84 000002FC 68[A003]E8CAFD83C4-         cdecl   puts, .e1
    84 00000304 02                 
    85 00000305 E8E3FD                      call    reboot
    86                                  .10E:
    87                                      ; Display drive information
    88 00000308 A1[C400]                    mov     ax, [BOOT + drive.no]
    89 0000030B 6A046A106A0268-             cdecl   itoa, ax, .p1, 2, 16, 0b0100
    89 00000312 [7703]50E8ECFE83C4-
    89 0000031A 0A                 
    90 0000031B A1[C600]                    mov     ax, [BOOT + drive.cyln]
    91 0000031E 6A046A106A0468-             cdecl   itoa, ax, .p2, 4, 16, 0b0100
    91 00000325 [8103]50E8D9FE83C4-
    91 0000032D 0A                 
    92 0000032E A1[C800]                    mov     ax, [BOOT + drive.head]
    93 00000331 6A046A106A0268-             cdecl   itoa, ax, .p3, 2, 16, 0b0100
    93 00000338 [8F03]50E8C6FE83C4-
    93 00000340 0A                 
    94 00000341 A1[CA00]                    mov     ax, [BOOT + drive.sect]
    95 00000344 6A046A106A0268-             cdecl   itoa, ax, .p4, 2, 16, 0b0100
    95 0000034B [9903]50E8B3FE83C4-
    95 00000353 0A                 
    96 00000354 68[6E03]E872FD83C4-         cdecl   puts, .s1
    96 0000035C 02                 
    97                                  
    98                                      ; Step next stage.
    99 0000035D EB5D                        jmp     stage_3
   100                                  
   101 0000035F 326564207374616765-     .s0     db "2ed stage...", 0x0A, 0x0D, 0
   101 00000368 2E2E2E0A0D00       
   102                                  
   103 0000036E 2044726976653A3078      .s1     db " Drive:0x"
   104 00000377 202020202C20433A30-     .p1     db "    , C:0x"
   104 00000380 78                 
   105 00000381 20202020202020202C-     .p2     db "        , H:0x"
   105 0000038A 20483A3078         
   106 0000038F 202020202C20533A30-     .p3     db "    , S:0x"
   106 00000398 78                 
   107 00000399 202020200A0D00          .p4     db "    ", 0x0A, 0x0D, 0
   108                                  
   109 000003A0 43616E277420676574-     .e1     db "Can't gett drive parameter.", 0  
   109 000003A9 742064726976652070-
   109 000003B2 6172616D657465722E-
   109 000003BB 00                 
   110                                  
   111                                  stage_3:
   112 000003BC 68[FF03]E80AFD83C4-         cdecl puts, .s0
   112 000003C4 02                 
   113                                  
   114                                      ; Protect mode uses inner BIOS's font
   115 000003C5 68[0002]E8FAFE83C4-         cdecl   get_font_adr, FONT
   115 000003CD 02                 
   116                                  
   117                                      ; Display Font Address
   118 000003CE 6A046A106A0468-             cdecl   itoa, word [FONT.seg], .p1, 4, 16, 0b0100
   118 000003D5 [1B04]FF36[0002]E8-
   118 000003DC 26FE83C40A         
   119 000003E1 6A046A106A0468-             cdecl   itoa, word [FONT.off], .p2, 4, 16, 0b0100
   119 000003E8 [2004]FF36[0202]E8-
   119 000003EF 13FE83C40A         
   120 000003F4 68[0D04]E8D2FC83C4-         cdecl   puts, .s1
   120 000003FC 02                 
   121                                  
   122                                      ; Finish program
   123 000003FD EBFE                        jmp     $ 
   124                                  
   125 000003FF 337264207374616765-     .s0    db "3rd stage..", 0x0A, 0x0D, 0
   125 00000408 2E2E0A0D00         
   126 0000040D 20466F6E7420416464-     .s1    db " Font Address="
   126 00000416 726573733D         
   127 0000041B 5A5A5A5A3A              .p1    db "ZZZZ:"
   128 00000420 5A5A5A5A3A0A0D00        .p2    db "ZZZZ:", 0x0A, 0x0D, 0
   129 00000428 0A0D00                          db 0x0A, 0x0D, 0 
   130                                  
   131                                  ; Padding (This file size should be 8K.)
   132 0000042B 00<rep 1BD5h>               times   BOOT_SIZE - ($ - $$)     db 0
   133                                      
