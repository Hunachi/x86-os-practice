     1                                  ; Reference: 作って理解するOS x86系コンピュータを動かす理論と実装 (https://gihyo.jp/book/2019/978-4-297-10847-2)
     2                                  
     3                                      BOOT_LOAD   equ     0x7C00 ; Address of boot program
     4                                  
     5                                      ORG     BOOT_LOAD          ; Instract load address to assembler.
     6                                  
     7                                  %include    "../include/macro.s"
     8                              <1> %macro  cdecl 1-*.nolist
     9                              <1> 
    10                              <1>     %rep    %0 - 1
    11                              <1>         push    %{-1:-1}
    12                              <1>         %rotate -1
    13                              <1>     %endrep
    14                              <1>     %rotate -1
    15                              <1> 
    16                              <1>         call    %1
    17                              <1>     
    18                              <1>     %if 1 < %0
    19                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    20                              <1>     %endif
    21                              <1> 
    22                              <1> %endmacro
     8                                  ; *****************
     9                                  ;    Entory Point 
    10                                  ; *****************
    11                                  entry:
    12 00000000 EB58                        jmp     ipl
    13 00000002 90<rep 58h>                 times    90-($-$$) db 0x90 ; BPB(BOPS Parameter Block)
    14                                  
    15                                  ipl:
    16 0000005A FA                          cli     ; Disabling Inerrupt
    17                                  
    18 0000005B B80000                      mov     ax, 0x0000
    19 0000005E 8ED8                        mov     ds, ax
    20 00000060 8EC0                        mov     es, ax
    21 00000062 8ED0                        mov     ss, ax
    22 00000064 BC007C                      mov     sp, BOOT_LOAD
    23                                  
    24 00000067 FB                          sti
    25                                  
    26 00000068 8816[4A01]                  mov     [BOOT.DRIVE], dl
    27                                  
    28                                      ; Print Numbers
    29 0000006C 6A016A0A6A0868-             cdecl   itoa,   8086,   .s1,   8,  10,   0b0001 ; "    8086"
    29 00000073 [3F01]68961FE8F000-
    29 0000007B 83C40A             
    30 0000007E 68[3F01]E8C80083C4-         cdecl   puts,   .s1
    30 00000086 02                 
    31                                  
    32 00000087 6A036A0A6A0868-             cdecl   itoa,   8086,   .s1,   8,  10,   0b0011 ; "+   8086"
    32 0000008E [3F01]68961FE8D500-
    32 00000096 83C40A             
    33 00000099 68[3F01]E8AD0083C4-         cdecl   puts,   .s1
    33 000000A1 02                 
    34                                      
    35 000000A2 6A016A0A6A0868-             cdecl   itoa,  -8086,   .s1,   8,  10,   0b0001 ; "-   8086"
    35 000000A9 [3F01]686AE0E8BA00-
    35 000000B1 83C40A             
    36 000000B4 68[3F01]E8920083C4-         cdecl   puts,   .s1
    36 000000BC 02                 
    37                                      
    38 000000BD 6A016A0A6A0868-             cdecl   itoa,     -1,   .s1,   8,  10,   0b0001 ; "-      1"
    38 000000C4 [3F01]6AFFE8A00083-
    38 000000CC C40A               
    39 000000CE 68[3F01]E8780083C4-         cdecl   puts,   .s1
    39 000000D6 02                 
    40                                      
    41 000000D7 6A006A0A6A0868-             cdecl   itoa,     -1,   .s1,   8,  10,   0b0000 ; "   65535"
    41 000000DE [3F01]6AFFE8860083-
    41 000000E6 C40A               
    42 000000E8 68[3F01]E85E0083C4-         cdecl   puts,   .s1
    42 000000F0 02                 
    43                                      
    44 000000F1 6A006A106A0868-             cdecl   itoa,     -1,   .s1,   8,  16,   0b0000 ; "    FFFF"
    44 000000F8 [3F01]6AFFE86C0083-
    44 00000100 C40A               
    45 00000102 68[3F01]E8440083C4-         cdecl   puts,   .s1
    45 0000010A 02                 
    46                                      
    47 0000010B 6A046A026A0868-             cdecl   itoa,     12,   .s1,   8,   2,   0b0100 ; "00001100"
    47 00000112 [3F01]6A0CE8520083-
    47 0000011A C40A               
    48 0000011C 68[3F01]E82A0083C4-         cdecl   puts,   .s1
    48 00000124 02                 
    49                                  
    50 00000125 EBFE                        jmp     $
    51                                  
    52 00000127 426F6F74696E672048-     .s0     db  "Booting HunachiOS....", 0x0A, 0x0D, 0
    52 00000130 756E616368694F532E-
    52 00000139 2E2E2E0A0D00       
    53 0000013F 2D2D2D2D2D2D2D2D0A-     .s1     db  "--------", 0x0A, 0x0D, 0
    53 00000148 0D00               
    54                                  
    55                                  ALIGN 2, db 0
    56                                  BOOT:
    57 0000014A 0000                    .DRIVE:     dw 0
    58                                  
    59                                  ; Module
    60                                  %include    "../modules/real/puts.s"
    61                              <1> puts:
    62 0000014C 55                  <1>     push    bp
    63 0000014D 89E5                <1>     mov     bp, sp
    64                              <1> 
    65 0000014F 50                  <1>     push    ax
    66 00000150 53                  <1>     push    bx
    67 00000151 56                  <1>     push    si
    68                              <1> 
    69 00000152 8B7604              <1>     mov     si, [bp + 4]    ; Address of string.
    70                              <1> 
    71                              <1>     ; Start program
    72 00000155 B40E                <1>     mov     ah, 0x0E        ; teletype's single word output
    73 00000157 BB0000              <1>     mov     bx, 0x0000      ; setting page number and word's color 0
    74 0000015A FC                  <1>     cld                     ; DF = 0 ; Add Address.
    75                              <1> .10L:
    76 0000015B AC                  <1>     lodsb                   ; al = *si++;
    77                              <1> 
    78 0000015C 3C00                <1>     cmp     al, 0
    79 0000015E 7404                <1>     je      .10E
    80                              <1> 
    81 00000160 CD10                <1>     int     0x10            ; call video BIOS.
    82 00000162 EBF7                <1>     jmp     .10L
    83                              <1> 
    84                              <1> .10E:
    85 00000164 5E                  <1>     pop     si
    86 00000165 5B                  <1>     pop     bx
    87 00000166 58                  <1>     pop     ax
    88                              <1> 
    89 00000167 89EC                <1>     mov     sp, bp
    90 00000169 5D                  <1>     pop     bp
    91                              <1> 
    92 0000016A C3                  <1>     ret
    61                                  %include    "../modules/real/itoa.s"
    62                              <1> ; A Function convert Number to string
    63                              <1> itoa:
    64                              <1>         ; +12 Flag | +10 Cardinal Number | +8 Buffer Size | +6 Buffer Address | +4 Number | +2 IP(Return Address) | 0 BP 
    65 0000016B 55                  <1>         push    bp                          ; BP+0|BP(元の値)
    66 0000016C 89E5                <1>         mov     bp, sp         
    67                              <1> 
    68 0000016E 50                  <1>         push    ax
    69 0000016F 53                  <1>         push    bx
    70 00000170 51                  <1>         push    cx
    71 00000171 52                  <1>         push    dx
    72 00000172 56                  <1>         push    si
    73 00000173 57                  <1>         push    di
    74                              <1> 
    75                              <1>         ; Get Arguments
    76 00000174 8B4604              <1>         mov     ax, [bp + 4]                
    77 00000177 8B7606              <1>         mov     si, [bp + 6]                
    78 0000017A 8B4E08              <1>         mov     cx, [bp + 8]               
    79                              <1> 
    80 0000017D 89F7                <1>         mov     di, si      ; di = &si[size - 1] ; last item of Buffer             
    81 0000017F 01CF                <1>         add     di, cx                      
    82 00000181 4F                  <1>         dec     di                          
    83                              <1> 
    84 00000182 8B5E0C              <1>         mov     bx, word [bp + 12]          
    85                              <1> 
    86                              <1>         ; Signed judg
    87                              <1>         ; if (bx & 0x01) { // Signed
    88                              <1>         ;   if (ax < 0) {
    89                              <1>         ;       bx |= 2 // set flag for display +-.
    90                              <1>         ;   }  
    91                              <1>         ; }
    92 00000185 F7C30100            <1>         test    bx, 0b0001                  
    93 00000189 7408                <1> .10Q:   je      .10E                         
    94 0000018B 83F800              <1>         cmp     ax, 0                       
    95 0000018E 7D03                <1> .12Q:   jge     .12E                        
    96 00000190 83CB02              <1>         or      bx, 0b0010                  
    97                              <1> .12E:
    98                              <1> .10E:
    99                              <1> 
   100                              <1>         ; Signed output judg
   101                              <1>         ;if (bx & 0x02) { // Check Flag which setting above code.
   102                              <1>         ;    if (ax < 0) { 
   103                              <1>         ;        ax *= -1 // Reverse sign 
   104                              <1>         ;        *si = '-'
   105                              <1>         ;    } else {
   106                              <1>         ;        *si = '+'
   107                              <1>         ;    }
   108                              <1>         ;    cx--;
   109                              <1>         ;}
   110 00000193 F7C30200            <1>         test    bx, 0b0010                  
   111 00000197 7410                <1> .20Q:   je      .20E                         
   112 00000199 83F800              <1>         cmp     ax, 0                       
   113 0000019C 7D07                <1> .22Q:   jge     .22F                        
   114 0000019E F7D8                <1>         neg     ax                          
   115 000001A0 C6042D              <1>         mov     [si], byte '-'              
   116 000001A3 EB03                <1>         jmp     .22E
   117                              <1> .22F:
   118 000001A5 C6042B              <1>         mov     [si], byte '+'              
   119                              <1> .22E:
   120 000001A8 49                  <1>         dec     cx
   121                              <1> .20E:
   122                              <1> 
   123                              <1>         ; Convert to ASCII Code
   124 000001A9 8B5E0A              <1>         mov     bx, [bp + 10]               
   125                              <1> .30L:
   126 000001AC BA0000              <1>         mov     dx, 0
   127 000001AF F7F3                <1>         div     bx
   128                              <1> 
   129 000001B1 89D6                <1>         mov     si, dx
   130 000001B3 8A94[DB01]          <1>         mov     dl, byte [.ascii + si]
   131                              <1> 
   132 000001B7 8815                <1>         mov     [di], dl
   133 000001B9 4F                  <1>         dec     di
   134                              <1> 
   135 000001BA 83F800              <1>         cmp     ax, 0
   136 000001BD E0ED                <1>         loopnz  .30L
   137                              <1>     
   138                              <1> .30E:
   139                              <1>         ; Fill in space
   140 000001BF 83F900              <1>         cmp     cx, 0
   141 000001C2 740D                <1> .40Q:   je      .40E
   142 000001C4 B020                <1>         mov     al, ' '
   143 000001C6 837E0C04            <1>         cmp     [bp + 12], word 0b0100
   144 000001CA 7502                <1> .42Q:   jne     .42E
   145 000001CC B030                <1>         mov     al, '0'
   146                              <1> .42E:
   147 000001CE FD                  <1>         std
   148 000001CF F3AA                <1>         rep     stosb
   149                              <1> .40E:
   150 000001D1 5F                  <1>         pop     di
   151 000001D2 5E                  <1>         pop     si
   152 000001D3 5A                  <1>         pop     dx
   153 000001D4 59                  <1>         pop     cx
   154 000001D5 5B                  <1>         pop     bx
   155 000001D6 58                  <1>         pop     ax
   156                              <1> 
   157 000001D7 89EC                <1>         mov     sp, bp
   158 000001D9 5D                  <1>         pop     bp
   159                              <1> 
   160 000001DA C3                  <1>         ret
   161                              <1> 
   162 000001DB 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"          ; table for convert
   162 000001E4 39414243444546      <1>
    62                                  
    63 000001EB 00<rep 13h>                 times    510-($-$$) db 0x00
    64 000001FE 55AA                        db      0x55, 0xAA
