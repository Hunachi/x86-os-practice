     1                                  ; Reference: 作って理解するOS x86系コンピュータを動かす理論と実装 (https://gihyo.jp/book/2019/978-4-297-10847-2)
     2                                  
     3                                      BOOT_LOAD   equ     0x7C00 ; Address of boot program
     4                                  
     5                                      ORG     BOOT_LOAD          ; Instract load address to assembler.
     6                                  
     7                                  %include    "../include/macro.s"
     8                              <1> %macro  cdecl 1-*.nolist
     9                              <1> 
    10                              <1>     %rep    %0 - 1
    11                              <1>         push    %{-1:-1}
    12                              <1>         %rotate -1
    13                              <1>     %endrep
    14                              <1>     %rotate -1
    15                              <1> 
    16                              <1>         call    %1
    17                              <1>     
    18                              <1>     %if 1 < %0
    19                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    20                              <1>     %endif
    21                              <1> 
    22                              <1> %endmacro
     8                                  ; *****************
     9                                  ;    Entory Point 
    10                                  ; *****************
    11                                  entry:
    12 00000000 EB58                        jmp     ipl
    13 00000002 90<rep 58h>                 times    90-($-$$) db 0x90 ; BPB(BOPS Parameter Block)
    14                                  
    15                                  ipl:
    16 0000005A FA                          cli     ; Disabling Inerrupt
    17                                  
    18 0000005B B80000                      mov     ax, 0x0000
    19 0000005E 8ED8                        mov     ds, ax
    20 00000060 8EC0                        mov     es, ax
    21 00000062 8ED0                        mov     ss, ax
    22 00000064 BC007C                      mov     sp, BOOT_LOAD
    23                                  
    24 00000067 FB                          sti
    25                                  
    26 00000068 8816[9200]                  mov     [BOOT.DRIVE], dl
    27                                  
    28                                      ; Print string
    29 0000006C 68[7A00]E8220083C4-         cdecl   puts, .s0
    29 00000074 02                 
    30                                  
    31 00000075 E8BB00                      cdecl   reboot
    32                                  
    33 00000078 EBFE                        jmp     $
    34                                  
    35 0000007A 426F6F74696E672048-     .s0     db  "Booting HunachiOS....", 0x0A, 0x0D, 0
    35 00000083 756E616368694F532E-
    35 0000008C 2E2E2E0A0D00       
    36                                  
    37                                  ALIGN 2, db 0
    38                                  BOOT:
    39 00000092 0000                    .DRIVE:     dw 0
    40                                  
    41                                  ; Module
    42                                  %include    "../modules/real/puts.s"
    43                              <1> puts:
    44 00000094 55                  <1>     push    bp
    45 00000095 89E5                <1>     mov     bp, sp
    46                              <1> 
    47 00000097 50                  <1>     push    ax
    48 00000098 53                  <1>     push    bx
    49 00000099 56                  <1>     push    si
    50                              <1> 
    51 0000009A 8B7604              <1>     mov     si, [bp + 4]    ; Address of string.
    52                              <1> 
    53                              <1>     ; Start program
    54 0000009D B40E                <1>     mov     ah, 0x0E        ; teletype's single word output
    55 0000009F BB0000              <1>     mov     bx, 0x0000      ; setting page number and word's color 0
    56 000000A2 FC                  <1>     cld                     ; DF = 0 ; Add Address.
    57                              <1> .10L:
    58 000000A3 AC                  <1>     lodsb                   ; al = *si++;
    59                              <1> 
    60 000000A4 3C00                <1>     cmp     al, 0
    61 000000A6 7404                <1>     je      .10E
    62                              <1> 
    63 000000A8 CD10                <1>     int     0x10            ; call video BIOS.
    64 000000AA EBF7                <1>     jmp     .10L
    65                              <1> 
    66                              <1> .10E:
    67 000000AC 5E                  <1>     pop     si
    68 000000AD 5B                  <1>     pop     bx
    69 000000AE 58                  <1>     pop     ax
    70                              <1> 
    71 000000AF 89EC                <1>     mov     sp, bp
    72 000000B1 5D                  <1>     pop     bp
    73                              <1> 
    74 000000B2 C3                  <1>     ret
    43                                  %include    "../modules/real/itoa.s"
    44                              <1> ; A Function convert Number to string
    45                              <1> itoa:
    46                              <1>         ; +12 Flag | +10 Cardinal Number | +8 Buffer Size | +6 Buffer Address | +4 Number | +2 IP(Return Address) | 0 BP 
    47 000000B3 55                  <1>         push    bp                          
    48 000000B4 89E5                <1>         mov     bp, sp         
    49                              <1> 
    50 000000B6 50                  <1>         push    ax
    51 000000B7 53                  <1>         push    bx
    52 000000B8 51                  <1>         push    cx
    53 000000B9 52                  <1>         push    dx
    54 000000BA 56                  <1>         push    si
    55 000000BB 57                  <1>         push    di
    56                              <1> 
    57                              <1>         ; Get Arguments
    58 000000BC 8B4604              <1>         mov     ax, [bp + 4]                
    59 000000BF 8B7606              <1>         mov     si, [bp + 6]                
    60 000000C2 8B4E08              <1>         mov     cx, [bp + 8]               
    61                              <1> 
    62 000000C5 89F7                <1>         mov     di, si      ; di = &si[size - 1] ; last item of Buffer             
    63 000000C7 01CF                <1>         add     di, cx                      
    64 000000C9 4F                  <1>         dec     di                          
    65                              <1> 
    66 000000CA 8B5E0C              <1>         mov     bx, word [bp + 12]          
    67                              <1> 
    68                              <1>         ; Signed judg
    69                              <1>         ; if (bx & 0x01) { // Signed
    70                              <1>         ;   if (ax < 0) {
    71                              <1>         ;       bx |= 2 // set flag for display +-.
    72                              <1>         ;   }  
    73                              <1>         ; }
    74 000000CD F7C30100            <1>         test    bx, 0b0001                  
    75 000000D1 7408                <1> .10Q:   je      .10E                         
    76 000000D3 83F800              <1>         cmp     ax, 0                       
    77 000000D6 7D03                <1> .12Q:   jge     .12E                        
    78 000000D8 83CB02              <1>         or      bx, 0b0010                  
    79                              <1> .12E:
    80                              <1> .10E:
    81                              <1> 
    82                              <1>         ; Signed output judg
    83                              <1>         ;if (bx & 0x02) { // Check Flag which setting above code.
    84                              <1>         ;    if (ax < 0) { 
    85                              <1>         ;        ax *= -1 // Reverse sign 
    86                              <1>         ;        *si = '-'
    87                              <1>         ;    } else {
    88                              <1>         ;        *si = '+'
    89                              <1>         ;    }
    90                              <1>         ;    cx--;
    91                              <1>         ;}
    92 000000DB F7C30200            <1>         test    bx, 0b0010                  
    93 000000DF 7410                <1> .20Q:   je      .20E                         
    94 000000E1 83F800              <1>         cmp     ax, 0                       
    95 000000E4 7D07                <1> .22Q:   jge     .22F                        
    96 000000E6 F7D8                <1>         neg     ax                          
    97 000000E8 C6042D              <1>         mov     [si], byte '-'              
    98 000000EB EB03                <1>         jmp     .22E
    99                              <1> .22F:
   100 000000ED C6042B              <1>         mov     [si], byte '+'              
   101                              <1> .22E:
   102 000000F0 49                  <1>         dec     cx
   103                              <1> .20E:
   104                              <1> 
   105                              <1>         ; Convert to ASCII Code
   106 000000F1 8B5E0A              <1>         mov     bx, [bp + 10]               
   107                              <1> .30L:
   108 000000F4 BA0000              <1>         mov     dx, 0
   109 000000F7 F7F3                <1>         div     bx
   110                              <1> 
   111 000000F9 89D6                <1>         mov     si, dx
   112 000000FB 8A94[2301]          <1>         mov     dl, byte [.ascii + si]
   113                              <1> 
   114 000000FF 8815                <1>         mov     [di], dl
   115 00000101 4F                  <1>         dec     di
   116                              <1> 
   117 00000102 83F800              <1>         cmp     ax, 0
   118 00000105 E0ED                <1>         loopnz  .30L
   119                              <1>     
   120                              <1> .30E:
   121                              <1>         ; Fill in space
   122 00000107 83F900              <1>         cmp     cx, 0
   123 0000010A 740D                <1> .40Q:   je      .40E
   124 0000010C B020                <1>         mov     al, ' '
   125 0000010E 837E0C04            <1>         cmp     [bp + 12], word 0b0100
   126 00000112 7502                <1> .42Q:   jne     .42E
   127 00000114 B030                <1>         mov     al, '0'
   128                              <1> .42E:
   129 00000116 FD                  <1>         std
   130 00000117 F3AA                <1>         rep     stosb
   131                              <1> .40E:
   132 00000119 5F                  <1>         pop     di
   133 0000011A 5E                  <1>         pop     si
   134 0000011B 5A                  <1>         pop     dx
   135 0000011C 59                  <1>         pop     cx
   136 0000011D 5B                  <1>         pop     bx
   137 0000011E 58                  <1>         pop     ax
   138                              <1> 
   139 0000011F 89EC                <1>         mov     sp, bp
   140 00000121 5D                  <1>         pop     bp
   141                              <1> 
   142 00000122 C3                  <1>         ret
   143                              <1> 
   144 00000123 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"          ; table for convert
   144 0000012C 39414243444546      <1>
    44                                  %include    "../modules/real/reboot.s"
    45                              <1> reboot:
    46                              <1>         ; Display message
    47 00000133 68[4F01]E85BFF83C4- <1>         cdecl   puts, .s0
    47 0000013B 02                  <1>
    48                              <1> 
    49                              <1>         ; Wait input from keyboard
    50                              <1> .10L:   
    51 0000013C B410                <1>         mov     ah, 0x10
    52 0000013E CD16                <1>         int     0x16
    53                              <1> 
    54 00000140 3C20                <1>         cmp     al, ' '
    55 00000142 75F8                <1>         jne     .10L
    56                              <1> 
    57                              <1>         ; Display retuen
    58 00000144 68[6D01]E84AFF83C4- <1>         cdecl    puts, .s1
    58 0000014C 02                  <1>
    59                              <1> 
    60                              <1>         ; Reboot
    61 0000014D CD19                <1>         int     0x19        ; BIOS(0x19)
    62                              <1> 
    63 0000014F 0A0D50757368205350- <1> .s0     db  0x0A, 0x0D, "Push SPACE key to reboot...", 0
    63 00000158 414345206B65792074- <1>
    63 00000161 6F207265626F6F742E- <1>
    63 0000016A 2E2E00              <1>
    64 0000016D 0A0D0A0D00          <1> .s1     db  0x0A, 0x0D, 0x0A, 0x0D, 0
    65                              <1> 
    45                                  
    46 00000172 00<rep 8Ch>                 times    510-($-$$) db 0x00
    47 000001FE 55AA                        db      0x55, 0xAA
