     1                                  ; Reference: 作って理解するOS x86系コンピュータを動かす理論と実装 (https://gihyo.jp/book/2019/978-4-297-10847-2)
     2                                  %include    "../include/macro.s"
     3                              <1> %macro  cdecl 1-*.nolist
     4                              <1> 
     5                              <1>     %rep    %0 - 1
     6                              <1>         push    %{-1:-1}
     7                              <1>         %rotate -1
     8                              <1>     %endrep
     9                              <1>     %rotate -1
    10                              <1> 
    11                              <1>         call    %1
    12                              <1>     
    13                              <1>     %if 1 < %0
    14                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    15                              <1>     %endif
    16                              <1> 
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> struc drive
    20 00000000 ????                <1>         .no         resw    1       ; Drive Number
    21 00000002 ????                <1>         .cyln       resw    1       ; Cylinder
    22 00000004 ????                <1>         .head       resw    1       ; HEAD
    23 00000006 ????                <1>         .sect       resw    1       ; Sector
    24                              <1> endstruc
     3                                  %include    "../include/define.s"
     4                              <1> BOOT_LOAD   equ     0x7c00
     5                              <1> 
     6                              <1> BOOT_SIZE   equ     (1024 * 8)
     7                              <1> SECT_SIZE   equ     (512)
     8                              <1> BOOT_SECT   equ     (BOOT_SIZE / SECT_SIZE) ; Sector count of Boot program. 
     4                                  
     5                                      ORG     BOOT_LOAD           ; Instruct load address to assembler.
     6                                  ; *****************
     7                                  ;    Entory Point 
     8                                  ; *****************
     9                                  entry:
    10 00000000 EB58                        jmp     ipl
    11 00000002 90<rep 58h>                 times    90-($-$$) db 0x90 ; BPB(BOPS Parameter Block)
    12                                  
    13                                  ipl:
    14 0000005A FA                          cli     ; Disabling Inerrupt
    15                                  
    16 0000005B B80000                      mov     ax, 0x0000
    17 0000005E 8ED8                        mov     ds, ax
    18 00000060 8EC0                        mov     es, ax
    19 00000062 8ED0                        mov     ss, ax
    20 00000064 BC007C                      mov     sp, BOOT_LOAD
    21                                  
    22 00000067 FB                          sti
    23                                  
    24 00000068 8816[C400]                  mov     [BOOT + drive.no], dl
    25                                  
    26 0000006C 68[9900]E85A0083C4-         cdecl   puts, .s0
    26 00000074 02                 
    27                                  
    28                                      ; Read all rest sector
    29 00000075 BB0F00                      mov     bx, BOOT_SECT - 1
    30 00000078 B9007E                      mov     cx, BOOT_LOAD + SECT_SIZE
    31                                  
    32 0000007B 515368[C400]E8A700-         cdecl   read_chs, BOOT, bx, cx
    32 00000083 83C406             
    33                                  
    34 00000086 39D8                        cmp     ax, bx
    35                                  .10Q:
    36 00000088 740C                        jz      .10E
    37                                  .10T:
    38 0000008A 68[B100]E83C0083C4-         cdecl   puts, .e0
    38 00000092 02                 
    39 00000093 E85500                      call    reboot
    40                                  .10E:
    41                                  
    42                                      ; Jamp nest stage
    43 00000096 E92802                      jmp     stage_2
    44                                  
    45 00000099 426F6F74696E672048-     .s0     db  "Booting HunachiOS....", 0x0A, 0x0D, 0
    45 000000A2 756E616368694F532E-
    45 000000AB 2E2E2E0A0D00       
    46 000000B1 4572726F723A736563-     .e0     db  "Error:sector read", 0
    46 000000BA 746F72207265616400 
    47                                  
    48 000000C3 00                      ALIGN 2, db 0
    49                                  BOOT:
    50                                      istruc  drive
    51 000000C4 0000                            at  drive.no,   dw 0 ; Drive number
    52 000000C6 0000                            at  drive.cyln, dw 0 ; C: Cylinder
    53 000000C8 0000                            at  drive.head, dw 0 ; H: Head
    54 000000CA 0200                            at  drive.sect, dw 2 ; S: Sector
    55                                      iend
    56                                  
    57                                  ; Module
    58                                  %include    "../modules/real/puts.s"
    59                              <1> puts:
    60 000000CC 55                  <1>     push    bp
    61 000000CD 89E5                <1>     mov     bp, sp
    62                              <1> 
    63 000000CF 50                  <1>     push    ax
    64 000000D0 53                  <1>     push    bx
    65 000000D1 56                  <1>     push    si
    66                              <1> 
    67 000000D2 8B7604              <1>     mov     si, [bp + 4]    ; Address of string.
    68                              <1> 
    69                              <1>     ; Start program
    70 000000D5 B40E                <1>     mov     ah, 0x0E        ; teletype's single word output
    71 000000D7 BB0000              <1>     mov     bx, 0x0000      ; setting page number and word's color 0
    72 000000DA FC                  <1>     cld                     ; DF = 0 ; Add Address.
    73                              <1> .10L:
    74 000000DB AC                  <1>     lodsb                   ; al = *si++;
    75                              <1> 
    76 000000DC 3C00                <1>     cmp     al, 0
    77 000000DE 7404                <1>     je      .10E
    78                              <1> 
    79 000000E0 CD10                <1>     int     0x10            ; call video BIOS.
    80 000000E2 EBF7                <1>     jmp     .10L
    81                              <1> 
    82                              <1> .10E:
    83 000000E4 5E                  <1>     pop     si
    84 000000E5 5B                  <1>     pop     bx
    85 000000E6 58                  <1>     pop     ax
    86                              <1> 
    87 000000E7 89EC                <1>     mov     sp, bp
    88 000000E9 5D                  <1>     pop     bp
    89                              <1> 
    90 000000EA C3                  <1>     ret
    59                                  %include    "../modules/real/reboot.s"
    60                              <1> reboot:
    61                              <1>         ; Display message
    62 000000EB 68[0701]E8DBFF83C4- <1>         cdecl   puts, .s0
    62 000000F3 02                  <1>
    63                              <1> 
    64                              <1>         ; Wait input from keyboard
    65                              <1> .10L:   
    66 000000F4 B410                <1>         mov     ah, 0x10
    67 000000F6 CD16                <1>         int     0x16
    68                              <1> 
    69 000000F8 3C20                <1>         cmp     al, ' '
    70 000000FA 75F8                <1>         jne     .10L
    71                              <1> 
    72                              <1>         ; Display retuen
    73 000000FC 68[2501]E8CAFF83C4- <1>         cdecl    puts, .s1
    73 00000104 02                  <1>
    74                              <1> 
    75                              <1>         ; Reboot
    76 00000105 CD19                <1>         int     0x19        ; BIOS(0x19)
    77                              <1> 
    78 00000107 0A0D50757368205350- <1> .s0     db  0x0A, 0x0D, "Push SPACE key to reboot...", 0
    78 00000110 414345206B65792074- <1>
    78 00000119 6F207265626F6F742E- <1>
    78 00000122 2E2E00              <1>
    79 00000125 0A0D0A0D00          <1> .s1     db  0x0A, 0x0D, 0x0A, 0x0D, 0
    80                              <1> 
    60                                  %include    "../modules/real/read_chs.s"
    61                              <1> read_chs:
    62                              <1>     ; +8 copy dist | +6 sector size | +4 parameter buffer
    63 0000012A 55                  <1>     push    bp
    64 0000012B 89E5                <1>     mov     bp, sp 
    65 0000012D 6A03                <1>     push    3           ; retry = 3 ; Retry Number
    66 0000012F 6A00                <1>     push    0           ; sect = 0 ; Reading Sector Number
    67                              <1> 
    68 00000131 53                  <1>     push    bx          
    69 00000132 51                  <1>     push    cx          
    70 00000133 52                  <1>     push    dx          
    71 00000134 06                  <1>     push    es
    72 00000135 56                  <1>     push    si
    73                              <1> 
    74                              <1>     ; start program
    75 00000136 8B7604              <1>     mov     si, [bp + 4]    ; SI = SRC buffer
    76                              <1> 
    77                              <1>     ; Setting Cylinder
    78 00000139 8A6C02              <1>     mov     ch, [si + drive.cyln + 0]
    79 0000013C 8A4C03              <1>     mov     cl, [si + drive.cyln + 1]
    80 0000013F C0E106              <1>     shl     cl, 6
    81 00000142 0A4C06              <1>     or      cl, [si + drive.sect]
    82                              <1> 
    83                              <1>     ; Read Sector
    84 00000145 8A7404              <1>     mov     dh, [si + drive.head]   ; dh = head number
    85 00000148 8A14                <1>     mov     dl, [si + 0]            ; dl = Drive number
    86 0000014A B80000              <1>     mov     ax, 0x0000              
    87 0000014D 8EC0                <1>     mov     es, ax                  ; es = segment
    88 0000014F 8B5E08              <1>     mov     bx, [bp + 8]            ; bx = copy dst
    89                              <1> .10L:
    90 00000152 B402                <1>     mov     ah, 0x02
    91 00000154 8A4606              <1>     mov     al, [bp + 6]
    92                              <1> 
    93 00000157 CD13                <1>     int     0x13                    ; cf = BIOS(0x13, 0x02)
    94 00000159 7304                <1>     jnc     .11E
    95                              <1> 
    96 0000015B B000                <1>     mov     al, 0
    97 0000015D EB0C                <1>     jmp     .10E
    98                              <1> .11E:
    99 0000015F 3C00                <1>     cmp     al, 0
   100 00000161 7508                <1>     jne     .10E
   101                              <1> 
   102 00000163 B80000              <1>     mov     ax, 0
   103 00000166 FF4EFE              <1>     dec     word [bp - 2]
   104 00000169 75E7                <1>     jnz     .10L
   105                              <1> .10E:
   106 0000016B B400                <1>     mov     ah, 0
   107                              <1> 
   108 0000016D 5E                  <1>     pop     si
   109 0000016E 07                  <1>     pop     es
   110 0000016F 5A                  <1>     pop     dx
   111 00000170 59                  <1>     pop     cx
   112 00000171 5B                  <1>     pop     bx
   113                              <1> 
   114 00000172 89EC                <1>     mov     sp, bp
   115 00000174 5D                  <1>     pop     bp
   116                              <1> 
   117 00000175 C3                  <1>     ret
   118                              <1>     
   119                              <1> 
   120                              <1> 
   121                              <1> 
    61                                  
    62 00000176 00<rep 88h>                 times    510-($-$$) db 0x00
    63 000001FE 55AA                        db      0x55, 0xAA
    64                                  
    65                                  ; Module (allocate after head 512 byte)
    66                                  %include    "../modules/real/itoa.s"
    67                              <1> ; A Function convert Number to string
    68                              <1> itoa:
    69                              <1>         ; +12 Flag | +10 Cardinal Number | +8 Buffer Size | +6 Buffer Address | +4 Number | +2 IP(Return Address) | 0 BP 
    70 00000200 55                  <1>         push    bp                          
    71 00000201 89E5                <1>         mov     bp, sp         
    72                              <1> 
    73 00000203 50                  <1>         push    ax
    74 00000204 53                  <1>         push    bx
    75 00000205 51                  <1>         push    cx
    76 00000206 52                  <1>         push    dx
    77 00000207 56                  <1>         push    si
    78 00000208 57                  <1>         push    di
    79                              <1> 
    80                              <1>         ; Get Arguments
    81 00000209 8B4604              <1>         mov     ax, [bp + 4]                
    82 0000020C 8B7606              <1>         mov     si, [bp + 6]                
    83 0000020F 8B4E08              <1>         mov     cx, [bp + 8]               
    84                              <1> 
    85 00000212 89F7                <1>         mov     di, si      ; di = &si[size - 1] ; last item of Buffer             
    86 00000214 01CF                <1>         add     di, cx                      
    87 00000216 4F                  <1>         dec     di                          
    88                              <1> 
    89 00000217 8B5E0C              <1>         mov     bx, word [bp + 12]          
    90                              <1> 
    91                              <1>         ; Signed judg
    92                              <1>         ; if (bx & 0x01) { // Signed
    93                              <1>         ;   if (ax < 0) {
    94                              <1>         ;       bx |= 2 // set flag for display +-.
    95                              <1>         ;   }  
    96                              <1>         ; }
    97 0000021A F7C30100            <1>         test    bx, 0b0001                  
    98 0000021E 7408                <1> .10Q:   je      .10E                         
    99 00000220 83F800              <1>         cmp     ax, 0                       
   100 00000223 7D03                <1> .12Q:   jge     .12E                        
   101 00000225 83CB02              <1>         or      bx, 0b0010                  
   102                              <1> .12E:
   103                              <1> .10E:
   104                              <1> 
   105                              <1>         ; Signed output judg
   106                              <1>         ;if (bx & 0x02) { // Check Flag which setting above code.
   107                              <1>         ;    if (ax < 0) { 
   108                              <1>         ;        ax *= -1 // Reverse sign 
   109                              <1>         ;        *si = '-'
   110                              <1>         ;    } else {
   111                              <1>         ;        *si = '+'
   112                              <1>         ;    }
   113                              <1>         ;    cx--;
   114                              <1>         ;}
   115 00000228 F7C30200            <1>         test    bx, 0b0010                  
   116 0000022C 7410                <1> .20Q:   je      .20E                         
   117 0000022E 83F800              <1>         cmp     ax, 0                       
   118 00000231 7D07                <1> .22Q:   jge     .22F                        
   119 00000233 F7D8                <1>         neg     ax                          
   120 00000235 C6042D              <1>         mov     [si], byte '-'              
   121 00000238 EB03                <1>         jmp     .22E
   122                              <1> .22F:
   123 0000023A C6042B              <1>         mov     [si], byte '+'              
   124                              <1> .22E:
   125 0000023D 49                  <1>         dec     cx
   126                              <1> .20E:
   127                              <1> 
   128                              <1>         ; Convert to ASCII Code
   129 0000023E 8B5E0A              <1>         mov     bx, [bp + 10]               
   130                              <1> .30L:
   131 00000241 BA0000              <1>         mov     dx, 0
   132 00000244 F7F3                <1>         div     bx
   133                              <1> 
   134 00000246 89D6                <1>         mov     si, dx
   135 00000248 8A94[7002]          <1>         mov     dl, byte [.ascii + si]
   136                              <1> 
   137 0000024C 8815                <1>         mov     [di], dl
   138 0000024E 4F                  <1>         dec     di
   139                              <1> 
   140 0000024F 83F800              <1>         cmp     ax, 0
   141 00000252 E0ED                <1>         loopnz  .30L
   142                              <1>     
   143                              <1> .30E:
   144                              <1>         ; Fill in space
   145 00000254 83F900              <1>         cmp     cx, 0
   146 00000257 740D                <1> .40Q:   je      .40E
   147 00000259 B020                <1>         mov     al, ' '
   148 0000025B 837E0C04            <1>         cmp     [bp + 12], word 0b0100
   149 0000025F 7502                <1> .42Q:   jne     .42E
   150 00000261 B030                <1>         mov     al, '0'
   151                              <1> .42E:
   152 00000263 FD                  <1>         std
   153 00000264 F3AA                <1>         rep     stosb
   154                              <1> .40E:
   155 00000266 5F                  <1>         pop     di
   156 00000267 5E                  <1>         pop     si
   157 00000268 5A                  <1>         pop     dx
   158 00000269 59                  <1>         pop     cx
   159 0000026A 5B                  <1>         pop     bx
   160 0000026B 58                  <1>         pop     ax
   161                              <1> 
   162 0000026C 89EC                <1>         mov     sp, bp
   163 0000026E 5D                  <1>         pop     bp
   164                              <1> 
   165 0000026F C3                  <1>         ret
   166                              <1> 
   167 00000270 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"          ; table for convert
   167 00000279 39414243444546      <1>
    67                                  %include    "../modules/real/get_drive_param.s"
    68                              <1> get_drive_param:
    69 00000280 55                  <1>     push    bp
    70 00000281 89E5                <1>     mov     bp, sp 
    71                              <1> 
    72 00000283 53                  <1>     push    bx          
    73 00000284 51                  <1>     push    cx                   
    74 00000285 06                  <1>     push    es
    75 00000286 56                  <1>     push    si
    76 00000287 57                  <1>     push    di 
    77                              <1> 
    78                              <1>     ; start program
    79 00000288 8B7604              <1>     mov     si, [bp + 4]    ; SI = SRC buffer
    80                              <1> 
    81 0000028B B80000              <1>     mov     ax, 0           ; Clear Disk Base Table Pointer 
    82 0000028E 8EC0                <1>     mov     es, ax
    83                              <1> 
    84 00000290 89C7                <1>     mov     di, ax
    85                              <1> 
    86 00000292 B408                <1>     mov     ah, 8
    87 00000294 8A14                <1>     mov     dl, [si, drive.no]
    88 00000296 CD13                <1>     int     0x13
    89                              <1> .10Q:
    90 00000298 721B                <1>     jc      .10F
    91                              <1> .10T:
    92 0000029A 88C8                <1>     mov     al, cl
    93 0000029C 83E03F              <1>     and     ax, 0x3F        ; ax = Sector count(Vaild only lower 16bit.)
    94                              <1> 
    95 0000029F C0E906              <1>     shr     cl, 6
    96 000002A2 C1C908              <1>     ror     cx, 8
    97 000002A5 41                  <1>     inc     cx
    98                              <1> 
    99 000002A6 0FB6DE              <1>     movzx   bx, dh          ; bx = head count
   100 000002A9 43                  <1>     inc    bx
   101                              <1> 
   102 000002AA 894C02              <1>     mov     [si + drive.cyln], cx
   103 000002AD 895C04              <1>     mov     [si + drive.head], bx
   104 000002B0 894406              <1>     mov     [si + drive.sect], ax
   105                              <1> 
   106 000002B3 EB03                <1>     jmp     .10E
   107                              <1> .10F:                          ; Failed
   108 000002B5 B80000              <1>     mov     ax, 0
   109                              <1> .10E:
   110 000002B8 5F                  <1>     pop     di
   111 000002B9 5E                  <1>     pop     si
   112 000002BA 07                  <1>     pop     es
   113 000002BB 59                  <1>     pop     cx
   114 000002BC 5B                  <1>     pop     bx
   115                              <1> 
   116 000002BD 89EC                <1>     mov     sp, bp
   117 000002BF 5D                  <1>     pop     bp
   118                              <1> 
   119 000002C0 C3                  <1>     ret
   120                              <1>     
   121                              <1> 
   122                              <1> 
   123                              <1> 
    68                                  
    69                                  stage_2:
    70 000002C1 68[3B03]E805FE83C4-         cdecl   puts, .s0
    70 000002C9 02                 
    71                                  
    72                                      ; Get drive information
    73 000002CA 68[C400]E8B0FF83C4-         cdecl   get_drive_param, BOOT
    73 000002D2 02                 
    74 000002D3 83F800                      cmp     ax, 0
    75                                  .10Q:
    76 000002D6 750C                        jne     .10E
    77                                  .10T:
    78 000002D8 68[7C03]E8EEFD83C4-         cdecl   puts, .e1
    78 000002E0 02                 
    79 000002E1 E807FE                      call    reboot
    80                                  .10E:
    81                                      ; Display drive information
    82 000002E4 A1[C400]                    mov     ax, [BOOT + drive.no]
    83 000002E7 6A046A106A0268-             cdecl   itoa, ax, .p1, 2, 16, 0b0100
    83 000002EE [5303]50E80CFF83C4-
    83 000002F6 0A                 
    84 000002F7 A1[C600]                    mov     ax, [BOOT + drive.cyln]
    85 000002FA 6A046A106A0468-             cdecl   itoa, ax, .p2, 4, 16, 0b0100
    85 00000301 [5D03]50E8F9FE83C4-
    85 00000309 0A                 
    86 0000030A A1[C800]                    mov     ax, [BOOT + drive.head]
    87 0000030D 6A046A106A0268-             cdecl   itoa, ax, .p3, 2, 16, 0b0100
    87 00000314 [6B03]50E8E6FE83C4-
    87 0000031C 0A                 
    88 0000031D A1[CA00]                    mov     ax, [BOOT + drive.sect]
    89 00000320 6A046A106A0268-             cdecl   itoa, ax, .p4, 2, 16, 0b0100
    89 00000327 [7503]50E8D3FE83C4-
    89 0000032F 0A                 
    90 00000330 68[4A03]E896FD83C4-         cdecl   puts, .s1
    90 00000338 02                 
    91                                  
    92                                      ; Finish program
    93 00000339 EBFE                        jmp     $
    94                                  
    95 0000033B 326564207374616765-     .s0     db "2ed stage...", 0x0A, 0x0D, 0
    95 00000344 2E2E2E0A0D00       
    96                                  
    97 0000034A 2044726976653A3078      .s1     db " Drive:0x"
    98 00000353 202020202C20433A30-     .p1     db "    , C:0x"
    98 0000035C 78                 
    99 0000035D 20202020202020202C-     .p2     db "        , H:0x"
    99 00000366 20483A3078         
   100 0000036B 202020202C20533A30-     .p3     db "    , S:0x"
   100 00000374 78                 
   101 00000375 202020200A0D00          .p4     db "    ", 0x0A, 0x0D, 0
   102                                  
   103 0000037C 43616E277420676574-     .e1     db "Can't gett drive parameter.", 0   
   103 00000385 742064726976652070-
   103 0000038E 6172616D657465722E-
   103 00000397 00                 
   104                                  
   105                                  ; Padding (This file size should be 8K.)
   106 00000398 00<rep 1C68h>               times   BOOT_SIZE - ($ - $$)     db 0
   107                                      
